[mu [(program)]
[def (a0) {a0}] [def (a1) {a1}] [def (a2) {a2}] [def (a3) {a3}] [def (a4) {a4}] [def (a5) {a5}] [def (a6) {a6}] [def (a7) {a7}]
[def (t0) {t0}] [def (t1) {t1}] [def (t2) {t2}] [def (t3) {t3}] [def (t4) {t4}] [def (t5) {t5}] [def (t6) {t6}]
[def (s0) {s0}] [def (s1) {s1}] [def (s2) {s2}] [def (s3) {s3}] [def (s4) {s4}] [def (s5) {s5}] [def (s6) {s6}] [def (s7) {s7}] [def (s8) {s8}] [def (s9) {s9}] [def (s10) {s10}] [def (s11) {s11}]
[def (zero) {zero}] [def (ra) {ra}] [def (sp) {sp}] [def (gp) {gp}] [def (tp) {tp}]
[def (condition!) [assertify [lam [(x)] [[hasattr {condition}] x]] {a condition}]]
[def (make-condition)
  [lam [(true-branch frag!) (false-branch frag!)]
  [lam [(rs1 reg!) (rs2 reg!)]
  [[addattr {condition}]
    [lam [(label frag!)]
      [pair {
        [id true-branch] rs1 rs2 label
      } {
        [id false-branch] rs1 rs2 label
      }]]]]]]
[def (<) [make-condition {blt} {bgeu}]]
[def (>=) [make-condition {bgeu} {blt}]]
[def (==) [make-condition {beq} {bne}]]
[def (!=) [make-condition {bne} {beq}]]
[def (true-condition) [[addattr {condition}]
  [lam [(label frag!)]
    [pair {j label} {}]]]]
[def (false-condition) [[addattr {condition}]
  [lam [(label frag!)]
    [pair {} {j label}]]]]
[def (+acc [-> block!]) [lam [(acc input! output!) (other input!)] {add acc acc other}]]
[def (-acc [-> block!]) [lam [(acc input! output!) (other input!)] {sub acc acc other}]]
[def (branch~) [lam [(condition condition!) (asm block!)] {
  [[condition {DONE}] false]
  [id asm]
  DONE:
  }]]
[def (unroll) [lam [(n num!) (body [lamof num!] [-> block!])]
  [[[fold-range 1 0 n] {}]
  [lam [(acc) (i)] {
    [id acc]
    [body i]
  }]]]]
[def (join) [lam [(n num!) (glue block!) (body [-> [lamof num!] block!])] {
  [[[fold-range 1 0 [- n 1]] {}]
  [lam [(acc) (i)] {
    [id acc]
    [body i]
    [id glue]
  }]]
  [body [- n 1]]}]]
[def (repeat~) [lam [(n num!) (body block!)]
  [unroll n [lam [(_)] body]]]]
[def (repeat) [lam [(n num!) (body block!)]
  [[unsafe-assert-exact-cycles [* n [cycles? body]]]
    [repeat~ n body]]]]
[def (for~) [lam [
    (start reg!) (stop reg!)
    (step num! [>! 0])
    (body block!)]
  [def (addition-and-branching-cycles) [+ cycles-of-iarith cycles-of-taken-branch]]
  [def (total-cycles [lamof num!]) [lam [(num-iterations)] [-
    [* num-iterations
      [+ [cycles? body] addition-and-branching-cycles]]
    [- cycles-of-taken-branch cycles-of-not-taken-branch]]]]
  [def (assembly) {
    LOOP:
    [id body]
    addi start start step
    blt start stop LOOP
  }]
  [pair assembly total-cycles]]]
[def (for) [lam [
    (counter reg!)
    (clobber clobber!)
    (start num!)
    to (stop num! [>! start])
    by (step num! [>! 0])
    (body block!)]
  [def (stopreg) clobber]
  [def (startup) {
    li counter start
    li stopreg stop
  }]
  [def (num-iterations) [/ [- stop start] step]]
  [def (assembly,cycles pair!) [for~ counter stopreg step body]]
  {
    [id startup]
    [
      [unsafe-assert-exact-cycles
        [[assembly,cycles false] num-iterations]]
      [assembly,cycles true]]
  }]]
[def (prologue-epilogue!) [∘ [lamof [∘ num! [∘ [>=! 0] [<! 12]]]] [-> block!]]]
[def (stackpush) [lam [(s/t/a frag!)] [lam [(n)]
  [[[fold-range 1 0 n] {addi sp sp [* 4 n]}]
    [lam [(acc block!) (k num!)] {
      sw [id s/t/a][id k] [* 4 k](sp)
      [id acc]
    }]]]]]
[def (stackpop) [lam [(s/t/a frag!)] [lam [(n)]
  [[[fold-range 1 0 n] {addi sp sp [* -4 n]}]
    [lam [(acc block!) (k num!)] {
      [id acc]
      lw [id s/t/a][id k] [* 4 k](sp)
    }]]]]]
[def (file) [lam [(function-names frag!) (body block!)]
  [mu []
    [[println {.global [id function-names]}]]
    [[println {.section .text}]]
    [[println body]]
    [[println {.end}]]]]]
[def (prologue prologue-epilogue!) [stackpush {s}]]
[def (epilogue prologue-epilogue!) [stackpop {s}]]
[def (busywait) [lam [(load [-> [lamof output!] block!]) (c0 clobber!)] {
  LOOP:
  [load c0]
  beqz c0 LOOP}]]
[;; { delay for k cycles. }]
[def (delay-short [-> block!]) [lam [(k [<! 100])] [repeat k {nop}]]]

[def (delay [-> block!]) [lam [(c0 clobber!) (k num! [>=! 0])]
  [if [<? k 4]
    [lam [] [delay-short k]]
    [lam [] [[unsafe-assert-exact-cycles k] {
      li c0 [/ [- k 1] 2]
      DELAY_LOOP:
      addi c0 c0 -1
      bnez c0 DELAY_LOOP
      [delay-short [% [- k 1] 2]]
    }]]]]]

[;; { execute block if condition is true in time = (2 + cycles of block) }]
[def (ifelse [-> block!]) [lam [(c0 clobber!) (condition condition!) (do-if block!) (do-else block!)]
  [def (elsecycles) [cycles? do-else]]
  [def (do-if)
    {
      [id do-if]
      [if [<? [cycles? do-if] elsecycles]
        [lam [] [delay c0 [- [- elsecycles [cycles? do-if]] 1]]]
        [lam [] {}]]
    }]
  [def (ifcycles [>=! [- elsecycles 1]]) [cycles? do-if]]
  [def (assembly block!) {
    [[condition {ELSE}] false]
    [id do-if]
    j DONE
    ELSE:
    [id do-else]
    [delay c0 [+ 1 [- ifcycles elsecycles]]]
    DONE:
    }]
  [;; { overhead = time to branch/not branch + time to jump }]
  [[unsafe-assert-exact-cycles [+ 2 ifcycles]] assembly]]]
[def (if+2) [lam [(c0 clobber!) (condition condition!) (instrs block!)] [ifelse c0 condition instrs {}]]]
[def (best)
  [lam [(compare [-> condition!])]
  [lam [(rd output!) (rs1 input!) (rs2 input!)]
  [ifelse {zero} [compare rs1 rs2] {
    mv rd rs1
  } {
    mv rd rs2
  }]]]]
[def (max~ [-> block!]) [best >=]]
[def (min~ [-> block!]) [best <]]

[def (init-allocate [-> block!]) [lam [(clobber0 clobber!)] {
  li clobber0 4
  sw clobber0 0(gp)
}]]
[def (allocate [-> block!])
  [lam [(nwords num!) (ptr output!)] {
    lw ptr 0(gp)
    addi ptr ptr [* 4 nwords]
    sw ptr 0(gp)
    addi ptr ptr [* -4 nwords]
    add ptr ptr gp
  }]]

[;; { iterator abstract data type }]
[def (get-rank!) [∘ [lamof reg!] [-> block!]]]
[def (iterator!) [assertify [lam [(x)] [[hasattr {iterator}] x]] {an iterator}]]
[def (iterator-giver!) [∘ [lamof id] [-> iterator!]]]
[def (iterable!) [-> iterator-giver!]]
[def (iterator-new [-> iterator!])
  [lam [
    i (init block!)
    l (length num!)
    o (output)
    s (split [lamof num! get-rank!] [-> iterator!])
    u (unroll [lamof [-> block!]] [-> [∘ [lamof num!] [-> block!]]])
    (unroll-gcd num!)
    p (post-unroll [lamof [multiple! unroll-gcd]] [-> block!])
    h (has-next condition!)
  ]
    [[addattr {iterator}]
      [lam [(get)] [get init length output split unroll unroll-gcd post-unroll has-next]]]]]
[def (it-init)
  [lam [(init) (length) (output) (split) (unroll) (unroll-gcd) (post-unroll) (has-next)] init]]
[def (it-length)
  [lam [(init) (length) (output) (split) (unroll) (unroll-gcd) (post-unroll) (has-next)] length]]
[def (it-output)
  [lam [(init) (length) (output) (split) (unroll) (unroll-gcd) (post-unroll) (has-next)] output]]
[def (it-split)
  [lam [(init) (length) (output) (split) (unroll) (unroll-gcd) (post-unroll) (has-next)] split]]
[def (it-unroll)
  [lam [(init) (length) (output) (split) (unroll) (unroll-gcd) (post-unroll) (has-next)] unroll]]
[def (it-unroll-gcd)
  [lam [(init) (length) (output) (split) (unroll) (unroll-gcd) (post-unroll) (has-next)] unroll-gcd]]
[def (it-post-unroll)
  [lam [(init) (length) (output) (split) (unroll) (unroll-gcd) (post-unroll) (has-next)] post-unroll]]
[def (it-has-next)
  [lam [(init) (length) (output) (split) (unroll) (unroll-gcd) (post-unroll) (has-next)] has-next]]

[def (map)
  [lam [(map [lamof num! id id] [-> pair!]) (it [-> iterator!])]
  [lam [(output')]
  [def (it) [it output']]
  [def (unroll) [it it-unroll]]
  [def (unroll)
    [lam [(b)]
    [lam [(n)]
      [def (b')
        [lam [(output)]
          [def (setup,output) [map n output output']]
          {
            [fst setup,output]
            [b [snd setup,output]]
          }]]
      [[unroll b'] n]]]]
  [iterator-new i [it it-init] l [it it-length] o [it it-output] s [it it-split] u unroll [it it-unroll-gcd] p [it it-post-unroll] h [it it-has-next]]]]]

[def (mapload)
  [lam [(n) (addr) (output')]
    [pair {lw output' [id addr]} output']]]

[def (matrix)
  [lam [(m num!) by (n num!) at (r reg!)]
  [def (allocate block!) [allocate [* m n] r]]
  [def (access [-> block!])
    [lam [(ptr output!) (i input!) (j input!)]
      {
        slli ptr j [+ 2 [log2 m]]
        addi ptr i r
        addi ptr ptr [* j ]
      }]]]]
[def (matrix-allocate) matrix]
[def (matrix-rows) matrix]


[def (subarray-new [-> iterable!])
  [lam [(array input!) of length (length num!) starting (get-rank get-rank!) strided (stride num!)]
  [lam [(c0 clobber!) (c1 clobber!)]
  [lam [(output-name)]
    [def (endreg) c1]
    [def (currentreg) c0]
    [def (init)
      {
        addi endreg array [* 4 length]
        [get-rank currentreg]
        slli currentreg currentreg [+ 2 [log2 stride]]
        add currentreg currentreg array
      }]
    [def (split)
      [lam [(n-ranks) (get-rank)]
        [[subarray-iterator c0 c1 array of length [/ length k] starting get-rank strided [* stride n-ranks]] output-name]]]
    [def (unroll)
      [lam [(block [-> block!])]
      [lam [(n)]
        [block {[* n [* 4 stride]] (currentreg)}]]]]
    [def (post-unroll)
      [lam [(k num!)]
        {
          addi currentreg currentreg [* 4 [* k stride]]
        }]]
    [def (has-next) [!= currentreg endreg]]
    [iterator-new i init l length o output-name s split u unroll 1 p post-unroll h has-next]]]]]
[def (array-new [-> iterable!])
  [lam [(array input!) of length (length num!)]
    [subarray-new array of length length starting [lam [(r)] { mv r zero }] strided 1]]]

[def (iterate [-> block!])
  [lam [(output) of (iterator [-> iterator!]) (block [blam! output])]
    [def (iterator) [iterator output]]
    [;; { TODO: compute this intelligently based on optimization level? }]
    [def (unroll-k num!) [iterator it-unroll-gcd]]
    [def (core block!)
      {
        [unroll unroll-k
          [[iterator it-unroll] block]]
        [[iterator it-post-unroll] unroll-k]
      }]
    [def (repeated block!)
      {
        ITERATE_LOOP_START:
        [id core]
        [[[iterator it-has-next] {ITERATE_LOOP_START}] true]
      }]
    [def (n-periods) [/ [iterator it-length] unroll-k]]
    [def (repeated
        [unsafe-assert-exact-cycles
          [+
            [* [- n-periods 1] cycles-of-taken-branch]
            cycles-of-not-taken-branch
            [*
              n-periods
              [+ [cycles? core]]]]
        ])
      repeated]
    {
      [iterator it-init]
      [id repeated]
    }]]

[def (iterate-at-rate [-> block!])
  [lam [(output) of (iterator [-> iterator!])
      doing (iterations num!) per (period num!) cycles
      (block [blam! output])]
    [def (unroll-k) iterations]
    [def (iterator) [iterator output]]
    [[divisor! unroll-k] [iterator it-unroll-gcd]]
    [def (core block!)
      {
        [unroll unroll-k
          [[iterator it-unroll] block]]
        [[iterator it-post-unroll] unroll-k]
      }]
    [def (delay-cycles [>=! 0]) [- period [cycles? core] cycles-of-taken-branch]]
    [def (repeated block!)
      {
        ITERATE_LOOP_START:
        [id core]
        [delay-short delay-cycles]
        [[[iterator it-has-next] {ITERATE_LOOP_START}] true]
      }]
    [def (n-periods) [/ [iterator it-length] unroll-k]]
    [def (repeated
        [unsafe-assert-exact-cycles
            [*
              n-periods
              period]
        ])
      repeated]
    {
      [iterator it-init]
      [id repeated]
    }]]
[def (rng rec!)
  [lam [(rng)]
  [lam [
      (counter clobber!)
      (state input!)
      (output output!)
      (nbits num!)
      (length num!)
      (init block!)]
    [def (shuffle)
      {
        slli output state 13
        xor state state output
        srai output state 17
        xor state state output
        slli output state 5
        xor state state output
        andi output state 0b[repeattext nbits {1}]
      }]
    [def (init block!)
      {
        [id init]
        [/* { shuffle a few times in case the initial seed was not a complicated enough state. the number of random bits grows exponentially with base 3ish as you shuffle so a few times should suffice for 32 bits }]
        [repeat 3 shuffle]
        li counter [id length]
      }]
    [;; { note: this split function does not guarantee that the multiset of outputs will be the same as if it was not split }]
    [def (split)
      [lam [(n-ranks num!) (get-rank get-rank!)]
        [[rng rng]
          counter state output nbits [/ length n-ranks]
          {
            [get-rank output]
            addi output output 1
            xor state state output
            [id shuffle]
          }]]]
    [def (unroll)
      [lam [(block [-> block!])]
        [lam [(_)]
            {
              [id shuffle]
              [block output]
            }]]]
    [def (post-unroll)
      [lam [(k)]
        {
          addi counter counter [- 0 k]
        }]]
    [def (has-next) [!= zero counter]]
    [iterator-new i init l length o output s split u unroll 1 p post-unroll h has-next]]]]

[def (rng-seeded [-> [-> iterator!]])
  [lam [(c0 clobber!) (c1 clobber!)
      bits (nbits) length (length) seeded (seed num!)]
  [lam [(output output!)]
  [rng c0 c1 output nbits length { li c1 seed }]]]]

[def (..-with-rank rec!)
  [lam [(..-with-rank)]
  [lam [(stopreg clobber!) (start num!) to (end num! [>=! start]) ranks (n-ranks num!) get-rank (get-rank get-rank!)]
  [def (length') [/ [- end start] n-ranks]]
  [lam [(output)]
    [def (init)
      {
        [get-rank output]
        [if [>? n-ranks 1] [lam [] {slli output output [log2 length']}] [lam [] {}]]
        addi output output [- start 1]
        addi stopreg output length'
      }]
    [def (split)
      [lam [(n-ranks num!) (get-rank get-rank!)]
        [[[..-with-rank ..-with-rank] stopreg start to end ranks n-ranks get-rank get-rank] output]]]
    [def (unroll)
      [lam [(block)]
        [lam [(n)]
            {
              addi output output 1
              [block output]
            }]]]
    [def (post-unroll)
      [lam [(k)]
        { }]]
    [def (has-next) [!= output stopreg]]
    [iterator-new i init l length' o output s split u unroll 1 p post-unroll h has-next]]]]]

[def (..)
  [lam [(stopreg) (start) to (end)]
    [..-with-rank stopreg start to end ranks 1 get-rank [lam [(r)] { li r 0 }]]]]
[def (cyclify rec!)
  [lam [(cyclify)]
  [lam [(counter clobber!) (c1 clobber!)
      (iterable [-> iterator!]) times (length num!)]
  [lam [(output)]
    [def (iterator) [iterable output]]
    [def (length') [* length [iterator it-length]]]
    [def (init block!)
      {
        li counter length'
        [iterator it-init]
      }]
    [def (split)
      [lam [(n-ranks num!) (get-rank get-rank!)]
        [def (splitted) [[iterator it-split] n-ranks get-rank]]
        [[[cyclify cyclify] counter c1 [lam [(_)] splitted] times length] output]]]
    [def (unroll)
      [lam [(block [-> block!])]
      [lam [(n)] [[[iterator it-unroll] block] [% n [iterator it-length]]]]]]
    [def (post-unroll)
      [lam [(k)]
        {
          addi counter counter [- 0 k]
          [ifelse c1 [iterator it-has-next] {
          } {
            [iterator it-init]
          }]
        }]]
    [def (has-next) [!= zero counter]]
    [iterator-new i init l length' o output s split u unroll [iterator it-length] p post-unroll h has-next]
    ]]]]

[def (zip rec!)
  [lam [(zip)]
  [lam [(out0) of (it0 [-> iterator!]) and (out1) of (it1 [-> iterator!])]
  [lam [(output-name)]
    [def (it0) [it0 out0]]
    [def (it1) [it1 out1]]
    [def (init) {
      [it0 it-init]
      [it1 it-init]
    }]
    [def (split)
      [lam [(n-ranks num!) (get-rank get-rank!)]
      [[[zip zip] out0 of [lam [(_)] [[it0 it-split] n-ranks get-rank]]
        and out1 of [lam [(_)] [[it1 it-split] n-ranks get-rank]]]
        output-name]]]
    [def (unroll)
      [lam [(block [-> block!])]
      [lam [(n num!)]
        [[[it0 it-unroll]
          [lam [(output0)]
            [[[it1 it-unroll]
              [lam [(output1)]
                [block [pair output0 output1]]]] n]]] n]]]]
    [def (post-unroll)
      [lam [(k num!)]
        {
          [[it0 it-post-unroll] k]
          [[it1 it-post-unroll] k]
        }]]
    [def (unroll-gcd)
      [LCM [it0 it-unroll-gcd] [it1 it-unroll-gcd]]]
    [def (length) [it0 it-length]]
    [def (has-next) [it0 it-has-next]]
    [iterator-new i init l length o output-name s split u unroll unroll-gcd p post-unroll h has-next]]]]]
[def (memregion-with-rank rec!)
  [lam [(memregion-with-rank)]
  [lam [(c0 clobber!) (c1 clobber!)
      (base-address num!) words (start num!) to (end num! [>! start]) by (stride [>=! 0])
      ranks (n-ranks num! [divisor! [- end start]]) (get-rank get-rank!)]
  [def (my-length) [/ [- end start] n-ranks]]
  [lam [(output-name)]
    [def (init)
      {
        li c1 [+ base-address [* 4 start stride]]
        [if [>? n-ranks 1]
          [lam [] {
            [get-rank c0]
            slli c0 c0 [log2 [* 4 my-length stride]]
            add c0 c0 c1
          }]
          [lam [] {
            add c0 zero c1
          }]]
      }]
    [def (split)
      [lam [(n-ranks num!) (get-rank get-rank!)]
        [[[memregion-with-rank memregion-with-rank] c0 c1 base-address words start to end by stride ranks n-ranks get-rank] output-name]]]
    [def (unroll)
      [lam [(block)]
      [lam [(n)]
        [block { [* 4 n stride] (c0) }]]]]
    [def (post-unroll) [lam [(k)] {}]]
    [def (has-next) false-condition]
    [def (unroll-gcd [>! 0]) [- end start]]
    [iterator-new i init l my-length o output-name s split u unroll unroll-gcd p post-unroll h has-next]
    ]]]]
[def (memregion)
  [lam [(c0) (c1) (base-address) words (start) to (end) by (stride)]
    [memregion-with-rank c0 c1
        base-address words start to end by stride
        ranks 1 [lam [(r)] { li r 0 }]]]]
[program]]
