[mu [(program)]
[def (get-rank!) [∘ [lamof reg!] [-> block!]]]
[def (critical-mask [-> [-> [-> block!]]])
  [lam [(n-ranks num!) (get-rank get-rank!)]
  [lam [(mask [lamof [∘ input! output!]] [-> block!]) (increment num!)]
  [lam [(clobber0 reg!) (do-critical block!)] {
    [get-rank clobber0]
    [mask clobber0]
    [repeat n-ranks {
      [if+2 [== {zero} clobber0] do-critical]
      addi clobber0 clobber0 increment
    }]
}]]]]
[def (critical [-> [lamof reg! block!]] [-> [-> block!]]) [lam [(a) (b)] [[critical-mask a b] [lam [(_)] {}] -1]]]
[def (single [-> [-> block!]])
  [lam [(get-rank get-rank!)]
  [lam [(clobber0 reg!) (do-single block!)] {
    [get-rank clobber0]
    [if+2 [== {zero} clobber0] do-single]
  }]]]
[program]]
