[mu [(program)]
[def (get-rank!) [âˆ˜ [lamof reg!] [-> block!]]]

[def (critical [-> [-> block!]])
  [lam [(n-ranks num!) (get-rank get-rank!)]
  [lam [(c0 reg!) (c1 reg!) (do-critical block!)] {
    [get-rank c0]
    [/* {Note: for a nontrivial mask, no rank will be active after the beginning.}]
    [repeat n-ranks {
      [if+2 c1 [== {zero} c0] do-critical]
      addi c0 c0 -1
    }]
}]]]

[def (single-else [-> [-> block!]])
  [lam [(get-rank get-rank!)]
  [lam [(c0 reg!) (do-single block!) (do-else block!)] {
    [get-rank c0]
    [ifelse c0 [== {zero} c0] do-single do-else]
  }]]]

[def (single [-> [-> block!]])
  [lam [(get-rank get-rank!)]
  [lam [(c0 reg!) (do-single block!)]
  [[single-else get-rank] c0 do-single {}]]]]

[def (init) [lam [(nranks-shmem num!) (single-shmem [-> block!])] {
  [single-shmem {a0} [init-allocate {a1}]]
  [single-shmem {a0} [allocate nranks-shmem {a1}]]
  }]]

[def (reduce-shmem [-> [-> block!]])
  [lam [(n-ranks num!) (get-rank get-rank!)]
    [def (chatbuf-offset) 4]
    [lam [
      (op [lamof reg! reg!] [-> block!])
      (value input! output!) (identity num!)
      (c0 clobber!)
      (c1 clobber!)
    ] {
      mv c0 gp
      addi c0 c0 chatbuf-offset
      [get-rank c1]
      slli c1 c1 2
      add c1 c0 c1
      sw value 0(c1)
      li value identity
      [unroll n-ranks [lam [(n)] {
        lw c1 [* 4 n](c0)
        [op value c1]}]]
      }]]]

[def (parfor [-> [-> block!]])
  [lam [(n-ranks num!) (get-rank get-rank!)]
  [lam [
    (counter reg!)
    (stopreg clobber!)
    (start num!)
    (stop num! [>! start])
    (step num! [>! 0])
    (body block!)]
    [def (step') [* step n-ranks]]
    [def (asm,cycles) [for~ counter stopreg step' body]]
    [def (loop) [
      [unsafe-assert-exact-cycles
        [[snd asm,cycles] [/ [- stop start] step']]]
      [fst asm,cycles]]]
    {
      [get-rank counter]
      slli counter counter [log2 step]
      addi counter counter start
      li stopreg stop
      [id loop]
    }]]]

[def (forkjoin [-> [-> block!]])
  [lam [(n-ranks num!) (get-rank get-rank!)]
  [lam [(c0 clobber!) (block [-> block!])]
    [def (k) [[[fold-range 1 0 n-ranks] 0]
      [lam [(acc num!) (n num!)] [max acc [cycles? [block n]]]]]]
    [def (get-rank-cycles) [cycles? [get-rank c0]]]
    [def (block)
      [lam [(n num!)]
      [def (block) [block n]]
      {
        FORK[id n]:
        [id block]
        [delay c0 [- k [cycles? block]]]
        j JOIN[id n]
      }]]
    [[unsafe-assert-exact-cycles
      [+ get-rank-cycles cycles-of-taken-branch k cycles-of-taken-branch [* 2 n-ranks]]]
      {
        [get-rank c0]
        [unroll n-ranks [lam [(n)]
          {
            beqz c0 FORK[id n]
            addi c0 c0 -1
          }]]
        [unroll n-ranks block]
        [unroll n-ranks [lam [(n)]
          {
            nop
            nop
            JOIN[id n]:
          }]]
      }]]]]
[program]]
