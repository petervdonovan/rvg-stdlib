[mu [(program)]

[def (id) [lam [(x)] x]]

[def (if) [lam [(condition) (then) (else)]
  [def (selected) [condition then else]]
  [selected]]]

[def (lam!) [lam [(k)] [lam [(l)]
  [if [[lam? k] l]
    [lam [] l]
    [fail l {Expected lam of [id k] parameters}]]]]]

[def (->) [lam [(result-check)]
  [lam [(l)]
    [applierify-varargs l [lam [(applier)]
      [result-check [applier]]]]]]]

[def (blam! [-> [-> [-> block!]]])
  [lam [(name)] [lam [(block)] [lamify block name]]]]

[def (assertify) [lam [(? [lam! 1]) (description)] [lam [(checkee)]
  [if [? checkee]
    [lam [] checkee]
    [fail checkee {Expected [id description]}]]]]]
[def (hasattr!) [lam [(attr)] [assertify [lam [(x)] [[hasattr attr] x]] attr]]]
[def (num!) [assertify [lam [(x)] [num? x]] {a number}]]
[def (frag!) [assertify [lam [(x)] [frag? x]] {a fragment}]]
[def (reg!) [assertify [lam [(x)] [reg? x]] {a register}]]
[def (lam! [lamof num!]) lam!]

[def (true  [addattr {bool}]) [lam [(a) (b)] a]]
[def (false [addattr {bool}]) [lam [(a) (b)] b]]
[def (bool!) [hasattr! {bool}]]
[def (pair [lam! 2]) [lam [(a) (b)]
  [[addattr {pair}]
    [lam [(get bool!)]
      [get a b]]]]]
[def (pair!) [hasattr! {pair}]]
[def (fst) [lam [(p pair!)] [p true]]]
[def (snd) [lam [(p pair!)] [p false]]]
[def (range!) [hasattr! {range}]]
[def (println) [lam [(s)] [lam [] [[print s]] [[print {
}]]]]]
[def (divisor!)
  [lam [(m)]
  [lam [(d)]
    [[=! 0] [% m d]]
    d]]]
[def (âˆ˜) [lam [(a [lam! 1]) (b)] [applierify-varargs b [lam [(applier)]
  [a [applier]]]]]]
[def (;;) [lam [(doc)] id]]
[def (/*) [lam [(ignored)] {}]]
[def (input!) reg!]
[def (output!) reg!]
[def (clobber!) reg!]
[def (unrolltext) [lam [(n num!) (body [lamof num!])]
  [[[fold-range 1 0 n] {}]
  [lam [(acc) (i)] {[id acc][body i]}]]]]
[def (repeattext) [lam [(n) (text)] [unrolltext n [lam [(_)] text]]]]
[program]]
